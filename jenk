pipeline{
    agent any
    stages {

        stage('git clone'){
            steps{

                git branch: 'main', url: 'https://github.com/vaibhav9191/kubernetes_java_deployment.git'
            }

           
        }

        
        
        stage('Build microservies Parallely'){
            parallel{

                stage('Build Microservice -1'){
                    steps{

                        sh 'cd shopfront && mvn clean install -Dskiptests'

                    }

                }
                stage('Build Microservice -2'){
                    steps{
                        sh 'cd productcatalogue && mvn clean install -Dskiptests'

                    }
                    
                }
                stage('Build Microservice -3'){

                    steps{
                        sh 'cd stockmanager && mvn clean install -Dskiptests'
                    }

                    
                }
                
            }

        }
        stage('static analysis'){

            steps{

                script{

                    withSonarQubeEnv(credentialsId: 'sonartok') {
                        sh 'cd shopfront && mvn clean package sonar:sonar -Dsonar.projectKey=shopfront -Dsonar.projectName=shopfront'
                        sh 'cd productcatalogue && mvn clean package sonar:sonar -Dsonar.projectKey=productcatalogue -Dsonar.projectName=productcatalogue'
                        sh 'cd stockmanager && mvn clean package sonar:sonar -Dsonar.projectKey=stockmanager -Dsonar.projectName=stockmanager'


                    }

                }

                

                

            }
        }

        stage('Quality gate status'){

            steps{
                script{
                    def services = ['shopfront', 'productcatalogue', 'stockmanager']

                    for(service in services){

                        echo "Checking quality gate for ${service}"
                        curl -X GET -u admin:vvv "http://3.84.23.127:9000/api/qualitygates/project_status?projectKey=${service}">>status.json
                        cat status.json | jq '.projectStatus.status'>ss.txt
                        sed 's/"//g' ss1.txt>status1.txt
                        echo "status=$(sed -n '1p' status1.txt)"
                        if [$(sed -n '1p' status1.txt) == 'ERROR']
                        then
                        echo -e "****RED QUALITY GATE ERROR"
                        fi
                    }
                }

            }
            
        }

    }
}