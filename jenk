pipeline{
    agent any
    stages {

        stage('git clone'){
            steps{

                git branch: 'main', url: 'https://github.com/vaibhav9191/kubernetes_java_deployment.git'
            }

           
        }

        
        
        stage('Build microservies Parallely'){
            parallel{

                stage('Build Microservice -1'){
                    steps{

                        sh 'cd shopfront && mvn clean install -Dskiptests'

                    }

                }
                stage('Build Microservice -2'){
                    steps{
                        sh 'cd productcatalogue && mvn clean install -Dskiptests'

                    }
                    
                }
                stage('Build Microservice -3'){

                    steps{
                        sh 'cd stockmanager && mvn clean install -Dskiptests'
                    }

                    
                }
                
            }

        }
        stage('static analysis'){

            steps{

                script{

                    withSonarQubeEnv(credentialsId: 'sonartok') {
                        sh 'cd shopfront && mvn clean package sonar:sonar -Dsonar.projectKey=shopfront -Dsonar.projectName=shopfront'
                        sh 'cd productcatalogue && mvn clean package sonar:sonar -Dsonar.projectKey=productcatalogue -Dsonar.projectName=productcatalogue'
                        sh 'cd stockmanager && mvn clean package sonar:sonar -Dsonar.projectKey=stockmanager -Dsonar.projectName=stockmanager'


                    }

                }

                

                

            }
        }

        stage('Quality gate status'){

            steps{
                script{

                    def services = ['shopfront','productcatalogue','stockmanager']
                    def qualityGate = qualityGates()
                    for(services in services){
                        def result = qualityGate.getQualitygeteResult(projectKey: service)
                        echo "Quality Gate status For ${service} : ${result.getStatus()}"
                        if(result.isFailed()){
                            currentBuild.result = 'FAILURE'
                        }
                    } 


                }
            }



        }

    }
}